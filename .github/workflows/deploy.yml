name: CI/CD Pipeline for Java Maven Project with Minikube and Java 17

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up JDK 17 (or your projectâ€™s specific version)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'  # Use 'temurin' as the distribution for JDK 17

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Build with Maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # Step 5: Run Unit Tests
      - name: Run Unit Tests
        run: mvn test

      # Step 6: Set up Minikube
      - name: Set up Minikube
        uses: medyagh/setup-minikube@latest
        id: minikube
        with:
          minikube-version: 1.33.1
          kubernetes-version: v1.31.0

      # Step 7: Set up Docker for Minikube
      - name: Set up Docker for Minikube
        run: eval $(minikube docker-env)

      # Step 8: Build Docker Image with Minikube's Docker
      - name: Build Docker Image
        run: |
          docker build -t myrepo:${{ github.sha }} .

      # Step 9: Load the Docker image into Minikube
      - name: Load Docker Image into Minikube
        run: minikube image load myrepo:${{ github.sha }}

      # Step 8: Install Istio using Helm
      - name: Install Istio
        run: |
          helm repo add istio https://istio-release.storage.googleapis.com/charts
          helm repo update
          helm install istio-base istio/base -n istio-system --create-namespace
          helm install istiod istio/istiod -n istio-system
          helm install istio-ingress istio/gateway -n istio-system
          kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/addons/prometheus.yaml
          kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.23/samples/addons/kiali.yaml

      # Step 9: Label the default namespace for Istio sidecar injection
      - name: Label default namespace for Istio
        run: kubectl label namespace default istio-injection=enabled

      # Step 10: Create Kubernetes Secrets dynamically from GitHub Secrets
      - name: Create Kubernetes Secrets
        run: |
            kubectl create secret generic devopsgpt-secret \
            --from-literal=DB_USERNAME=${{ secrets.DB_USERNAME }} \
            --from-literal=DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -n default --dry-run=client -o yaml | kubectl apply -f -

      # Step 11: Generate Kubernetes YAML files using Helm
      - name: Generate Kubernetes YAML files
        run: helm template release helm/devopsgpt --set image.repository=myrepo --set image.tag=${{ github.sha }} > k8s-manifests.yaml

      # Step 12: Deploy to Minikube using Helm
      - name: Deploy to Minikube
        run: |
          helm upgrade --install release helm/devopsgpt --set image.repository=myrepo --set image.tag=${{ github.sha }}

      # Step 13: Apply Istio Resources
      - name: Apply Istio Resources
        run: |
            kubectl apply -f istio/gateway.yaml
            kubectl apply -f istio/virtualservice.yaml
            kubectl apply -f istio/destinationrule.yaml
            kubectl apply -f istio/authorizationpolicy.yaml

      # Step 14: Verify the Deployment
      - name: Verify Deployment
        run: |
          minikube service list
          helm list
          kubectl rollout status deployment/release-devopsgpt -n default
          kubectl wait --for=condition=ready pod -l app=devopsgpt --timeout=1m -n default
          kubectl get pods -n default
          
